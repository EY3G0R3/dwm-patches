URL: http://dwm.suckless.org/patches/historical/float_border_color
float_border_color2 allows you to specify a different border color for floating
windows.

Index: dwm/config.def.h
===================================================================
--- dwm/config.def.h.orig
+++ dwm/config.def.h
@@ -11,6 +11,8 @@ static const char normfgcolor[]     = "#
 static const char selbordercolor[]  = "#ff0000";
 static const char selbgcolor[]      = "#005577";
 static const char selfgcolor[]      = "#eeeeee";
+static const char floatnormbordercolor[] = "#005577";
+static const char floatselbordercolor[]  = "#005577";
 static const unsigned int borderpx  = 1;        /* border pixel of windows */
 static const unsigned int snap      = 32;       /* snap pixel */
 static const int showbar            = 1;        /* 0 means no bar */
Index: dwm/dwm.c
===================================================================
--- dwm/dwm.c.orig
+++ dwm/dwm.c
@@ -809,7 +809,10 @@ focus(Client *c)
 		detachstack(c);
 		attachstack(c);
 		grabbuttons(c, 1);
-		XSetWindowBorder(dpy, c->win, scheme[SchemeSel].border->pix);
+		if(c->isfloating)
+			XSetWindowBorder(dpy, c->win, scheme[SchemeSel].floatborder->pix);
+		else
+			XSetWindowBorder(dpy, c->win, scheme[SchemeSel].border->pix);
 		setfocus(c);
 	} else {
 		XSetInputFocus(dpy, root, RevertToPointerRoot, CurrentTime);
@@ -1067,7 +1070,10 @@ manage(Window w, XWindowAttributes *wa)
 
 	wc.border_width = c->bw;
 	XConfigureWindow(dpy, w, CWBorderWidth, &wc);
-	XSetWindowBorder(dpy, w, scheme[SchemeNorm].border->pix);
+	if(c->isfloating)
+		XSetWindowBorder(dpy, w, scheme[SchemeNorm].floatborder->pix);
+	else
+		XSetWindowBorder(dpy, w, scheme[SchemeNorm].border->pix);
 	configure(c); /* propagates border_width, if size doesn't change */
 	updatewindowtype(c);
 	updatesizehints(c);
@@ -1084,6 +1090,8 @@ manage(Window w, XWindowAttributes *wa)
 		c->isfloating = c->oldstate = trans != None || c->isfixed;
 	if (c->isfloating)
 		XRaiseWindow(dpy, c->win);
+	if(c->isfloating)
+		XSetWindowBorder(dpy, w, scheme[SchemeNorm].floatborder->pix);
 	attach(c);
 	attachstack(c);
 	XChangeProperty(dpy, root, netatom[NetClientList], XA_WINDOW, 32, PropModeAppend,
@@ -1590,9 +1598,11 @@ setup(void)
 	cursor[CurResize] = drw_cur_create(drw, XC_sizing);
 	cursor[CurMove] = drw_cur_create(drw, XC_fleur);
 	/* init appearance */
+	scheme[SchemeNorm].floatborder = drw_clr_create(drw, floatnormbordercolor);
 	scheme[SchemeNorm].border = drw_clr_create(drw, normbordercolor);
 	scheme[SchemeNorm].bg = drw_clr_create(drw, normbgcolor);
 	scheme[SchemeNorm].fg = drw_clr_create(drw, normfgcolor);
+	scheme[SchemeSel].floatborder = drw_clr_create(drw, floatselbordercolor);
 	scheme[SchemeSel].border = drw_clr_create(drw, selbordercolor);
 	scheme[SchemeSel].bg = drw_clr_create(drw, selbgcolor);
 	scheme[SchemeSel].fg = drw_clr_create(drw, selfgcolor);
@@ -1717,6 +1727,10 @@ togglefloating(const Arg *arg)
 		return;
 	selmon->sel->isfloating = !selmon->sel->isfloating || selmon->sel->isfixed;
 	if (selmon->sel->isfloating)
+		XSetWindowBorder(dpy, selmon->sel->win, scheme[SchemeSel].floatborder->pix);
+	else
+		XSetWindowBorder(dpy, selmon->sel->win, scheme[SchemeSel].border->pix);
+	if(selmon->sel->isfloating)
 		/*restore last known float dimensions*/
 		resize(selmon->sel, selmon->sel->sfx, selmon->sel->sfy,
 		       selmon->sel->sfw, selmon->sel->sfh, 0);
Index: dwm/drw.h
===================================================================
--- dwm/drw.h.orig
+++ dwm/drw.h
@@ -23,6 +23,7 @@ typedef struct {
 	Clr *fg;
 	Clr *bg;
 	Clr *border;
+	Clr *floatborder;
 } ClrScheme;
 
 typedef struct {
